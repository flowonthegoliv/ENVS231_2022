{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Tutorial_1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPSTPWaJlsAOYPdlkDUc1EZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/flowonthegoliv/ENVS231_2022/blob/main/python_walk_through\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3w1AfafW4Tx_"
      },
      "source": [
        "# Computer Practical 1 \n",
        "\n",
        "Aim of the practical session:\n",
        "\n",
        "1. To learn the basics of Python\n",
        "2. To understand logic operations \n",
        "3. To create some simple plots\n",
        "4. To be able to read data in from *.csv files\n",
        "5. To create some simple statistics \n",
        "\n",
        "Welcome to your *first* course in Python. In this course we are going to learn the very basics of Python programming and then begin to apply these techniques to the data we've collected and from other data sources relating to the city's air pollution. So let's start with Python, what is Python? \n",
        "\n",
        "Python is a language which is multiplatform and does not require to be compiled. Compiling means that sometimes get the computer to translate the programming language in a certain machine lexicon for the computer to understand. Thankfully we do not need to do this for Python, this is the one of its major advantages. \n",
        "\n",
        "In this module we will be using Google Colabs; this is a brilliant tool as it means that all computations are not done on your local computer, but they are done online on Google's servers. However, if you do want to install Python locally on your computer this is possible, in most cases it will actually already be installed as many background programmes use Python in their day to day operations on computers. If you have any questions about installing this please ask and I can guide you through the route to do this. Okay, so we are now programming in something called a notebook inside of the notebook we have a play sign which when clicked will send the operation to be computed. In the example below we allocate a letter to a number this means that that we can undertake simple operations based on numbers. This is similar to something you might see in Excel however opposed to using cell numbers we are now allocating letters for each number. On a side note you will also see the pound sign or hashtag sign (#) used before some text. This allows us to write or comment in a programme and the computer will completely ignore it. Here we use the letters a, b and c...you can use anyting you would like. In this tutorial I will be writing over these values in the different cells; if you do not write over them the computer will remember...\n",
        "\n",
        "# Basic Operations"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YyQVXe0WUOEU",
        "outputId": "f6ad2323-1180-4de9-be91-0bdad926897f"
      },
      "source": [
        "#first example (addition & subtraction):\n",
        "a = 4 \n",
        "b = 6\n",
        "c = a + b - a\n",
        "#to see the answer we need to tell the computer to print it on screen:\n",
        "print(c)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OYCN7UXWjit2",
        "outputId": "99bce770-d69a-42ef-ccae-05ce45552308"
      },
      "source": [
        "#second example (multiplication and division):\n",
        "a = 2\n",
        "b = 3\n",
        "c = (b*a)/a \n",
        "c = a**27 #power of \n",
        "print(c)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "134217728\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u-qEpQPgUPXi"
      },
      "source": [
        "# Libraries \n",
        "\n",
        "So actually, the language Python alone is rather stupid, alone it only has very simple operations such as adding, dividing and multiplying. To increase the flexibility of the language we need to introduce libraries. So, what do I mean by a library? A library is a set of pre-programmed routines which have been programmed already for you for example if we were to calculate the mean of a number we could do this quite easily by using some of Python is built in routines of addition and division. However, this only works if we have a small set of numbers:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "26oO9BdYUL2u",
        "outputId": "879a95ae-ffc3-4dc3-8449-c7232c5aea24"
      },
      "source": [
        "#calculating the mean\n",
        "a = (1 + 2 + 3 + 4 + 9)/5\n",
        "print(a)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZdAO7q8Tl-YC"
      },
      "source": [
        "Instead, now if we used one of the most commonly used libraries (numpy) we can perform all sorts of mathematical operations. These range from simple tasks from means an average is all the way open to extremely complex linear algebra functions. We can import the library as shown below. Here we import the library with the name (np) and we can call that function whenever we like. \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j1r8B5ZtmYhL",
        "outputId": "a0326919-dc08-4e01-e3c6-41d679b14b12"
      },
      "source": [
        "import numpy as np\n",
        "#calculating the mean\n",
        "a = np.mean([1,2,3,4,9])\n",
        "print(a)\n",
        "#calculating the median \n",
        "a = np.median([1,2,3,4,9])\n",
        "print(a)\n",
        "#calculating the standard deviation \n",
        "a = np.std([1,2,3,4,9])\n",
        "print(a)\n",
        "# calculating max\n",
        "a = np.max([1,2,3,4,9])\n",
        "print(a)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.8\n",
            "3.0\n",
            "2.785677655436824\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k0bW-4-jnDYY"
      },
      "source": [
        "These are just a select few of some of the functions which can be called. There are millions of different functions inside of numpy the best way to find these is by looking into the documentation which can be found at this link: \n",
        "\n",
        "https://numpy.org/doc/stable/user/absolute_beginners.html\n",
        "\n",
        "There are many different libraries which have very similar or the same tools and the best way to find a tool for which you want to apply to your data is simply by using Google. Of course you can always ask myself or one of the facilitators however we might give different answers based on our background of use of different libraries (Quite likely we will probably Google the library first too!).\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eKSifAw04QHT"
      },
      "source": [
        "# Arrays\n",
        "The next thing we're going to work on is how we can store multiple numbers in a single array. An array mathematically represents something called a vector, in Python we do this using the square brackets.  \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i9iM0RI7uc8i",
        "outputId": "e49d9c5e-75fc-4221-bcab-649447af7dfd"
      },
      "source": [
        "# creating an array \n",
        "a = [1,2,5,3,4,5,7,8]\n",
        "print(a)\n",
        "# print(a[2])"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 5, 3, 4, 5, 7, 8]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kn7A2L5Mut4M",
        "outputId": "7efe59b5-ff83-4558-bb40-bb96e975643a"
      },
      "source": [
        "import numpy as np\n",
        "#using the array\n",
        "b = np.mean(a);\n",
        "print(b)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4.375\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q9gSZO1dxh9g"
      },
      "source": [
        "If we want to access any of the numbers in the array, we can do this by using their index...annoyingly computers start couting from 0 so to retreive the first value in the array we would say:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K0MRPOAbxuSP",
        "outputId": "3c7e9cac-c148-4611-916b-3b47de4786c4"
      },
      "source": [
        "a = [1,2,5,3,8]\n",
        "#this will retrieve the first value in the array\n",
        "print(a[2])\n",
        "#you can change this number to retrieve any number. "
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Iq-CkWYFvaEp"
      },
      "source": [
        "As of present this array just has one dimension. However, sometimes we might want the array to a second dimension. This is what we could call a matrix:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O2muWJ5gvknj",
        "outputId": "a9507968-df00-4548-a4b1-52589539df59"
      },
      "source": [
        "#here we now have a two dimensional array of size 3 x 4\n",
        "a = [[1,2,3,4], [2,3,4,5], [3,2,3,4]]\n",
        "print(a)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1, 2, 3, 4], [2, 3, 4, 5], [3, 2, 3, 4]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UbwKv77dyFd7",
        "outputId": "020ae978-fb1c-475a-c579-1b7a0ed6323a"
      },
      "source": [
        "import numpy as np\n",
        "#you can check the size of the matrix by using:\n",
        "c = np.shape(a)\n",
        "print(c)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(3, 4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dP8qW_b6xKPU"
      },
      "source": [
        "We can think of this perhaps as a table; here the table has three rows and four columns. Annoyingly in computing we always define the size of matrix the opposite way that you are used to. Remember reinforced concrete (RC)...if you forget! Now we have a table it means we can take the mean in two directions:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-ZwzLuNPyMsd",
        "outputId": "50d68c59-740a-46f5-c01b-771c845a318d"
      },
      "source": [
        "import numpy as np\n",
        "#this takes the mean across the rows (note we use 0 to denote the first dimension)\n",
        "a = [[1,2,3,4], [2,3,4,5], [3,2,3,4]]\n",
        "c_1 = np.mean(a,0)\n",
        "print(c_1)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2.         2.33333333 3.33333333 4.33333333]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aeog6TpryY7P",
        "outputId": "c57e1060-2f0b-4e4a-82c9-86a4fb039234"
      },
      "source": [
        "import numpy as np\n",
        "a = [[1,2,3,4], [2,3,4,5], [3,2,3,4]]\n",
        "c_2 = np.mean(a,1)\n",
        "print(c_2)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2.5 3.5 3. ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lG_GcFl0yhkZ"
      },
      "source": [
        "These are both really handy operations for quickly looking at statistics of the the data we have, for example in the pollution data we might have time store in the rows data and days stored in the rows. This would quickly allow us to access these statistics. If we wanted to find the mean of the whole matrix, we could do this in one of two ways nesting the functions inside one another:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BgXDw3JL1Wz2",
        "outputId": "0caae41b-913e-41ea-edac-ab5c52c669e8"
      },
      "source": [
        "import numpy as np\n",
        "#we could do this by taking the mean in both direction\n",
        "a = [[1,2,3,4], [2,3,4,5], [3,2,3,4]]\n",
        "c = np.mean(np.mean(a,1),0)\n",
        "print(c)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_BhPjxTN25Rb",
        "outputId": "06c9c954-0ced-4d5b-9888-f7b81e88ad22"
      },
      "source": [
        "import numpy as np\n",
        "#or we can do it by converting (unravelling) the matrix:\n",
        "a = [[1,2,3,4], [2,3,4,5], [3,2,3,4]]\n",
        "c = np.mean(np.ravel(a),0)\n",
        "print(c)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iHSB5jRF3Jt0"
      },
      "source": [
        "# Loops\n",
        "\n",
        "One of the quirks of Python means that we have to be very careful with indentations. When creating a loop everything inside of the loop must be indented. Once we have finished the loop we stop this indentation. This must be done with the tab key and not with the space bar. Python will not run a programme inside of a loop if the indentation is not correct. This is implemented in Python to ensure that when people code they code in a neat fashion. In languages such as C and matlab there is no requirement for indentations, this often means open brackets especially in my case closed brackets the codes which can be used are often very messy\n",
        "\n",
        "One of the next things we will introduce is the use of loops. A loop is really useful and is common in every computing language. What a loop allows us to do is to repeat the same operation a number of times. This is done either with a for loop where we set the maximum number of iterations or it is done using a while loop...\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qo0eJkfR3clf",
        "outputId": "1ead1de8-2252-4f24-de33-c6ee1d0ae1c3"
      },
      "source": [
        "# note we use in range here to denote the start and end number\n",
        "a = np.zeros([10,1]) #if here we create an empty array we can also allocate values\n",
        "for i in range(0,10):\n",
        "  a[i] = np.random.rand(1)\n",
        "  # print(i)\n",
        "print(a)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.36062348]\n",
            " [0.33054775]\n",
            " [0.03414442]\n",
            " [0.16143043]\n",
            " [0.80010671]\n",
            " [0.49908562]\n",
            " [0.85296064]\n",
            " [0.36221216]\n",
            " [0.07404644]\n",
            " [0.41939412]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U7aXM9Jv4hwH"
      },
      "source": [
        "As we can see what the loop has allowed us to do here is to repeat the same operation whilst increasing 'i' which is our number from which we are iterating. This means we would be able to perform the operation 10 times perhaps even changing an input parameter. This letter can be any letter, again i is just commonly used in computing. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zFjmMPkF4Ldq",
        "outputId": "2184237a-4c29-4748-efff-048419e6ac2f"
      },
      "source": [
        "#here we can change the start and end number of i and even change the size of the steps it uses. \n",
        "for i in range(2,11,2):\n",
        "  print(i)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "4\n",
            "6\n",
            "8\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AR_1kCxHcTkr",
        "outputId": "5029517e-2007-4273-e497-e5b4cf9db556"
      },
      "source": [
        "for q in range(0,5):\n",
        "  print(q)\n",
        "print('finished')"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "finished\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FsDLFiZ3co6c",
        "outputId": "7085c53d-8469-4975-f0f9-adb9f18401cc"
      },
      "source": [
        "#added second practical \n",
        "import numpy as np\n",
        "tmp = np.zeros(5,)\n",
        "count = 0;\n",
        "for loop in range(0,10,2):\n",
        "  # print(loop)\n",
        "  tmp[count]=loop\n",
        "  count = count + 1 \n",
        "print(tmp)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 2. 4. 6. 8.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O7VKMmx95gM1"
      },
      "source": [
        "# Logic\n",
        "\n",
        "The next very common thing used in computing is logic. Logic can be thought of as questions one might ask themselves when playing a computer game. These can be questions such as if one was to do this to a certain operation however if one was to do something else then do a second operation. Being logical in the computer code allows us to make decisions based on parameters for example if we were to find our average value was greater than a certain value we could have an operation to one function, however if we were to find that the value was less than a certain prescribed value then we could have it do alternative operation.  For example:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vayZNX665iXU",
        "outputId": "d46daed2-52bd-41f7-d690-6725e5f45fc6"
      },
      "source": [
        "a = 8 #change the input value\n",
        "if a > 5: # here we are asking if a is greater than 5\n",
        "  print('Hello') # here note for printing words I use '', this tells the computer these are words not numbers!\n",
        "if a < 5: # here we are asdking if a is less than 5\n",
        "  print('Goodbye')"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y6YDJFEP6A-u"
      },
      "source": [
        "We can further extend this functionality by introducing else statements. This means if we ask the computer a question and if does not meet the if criteria we can get the computer to do another operation, for example:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S3L9vMdx6TwI",
        "outputId": "0d42981a-1e83-49bf-9dfe-30c9321ffc58"
      },
      "source": [
        "a = 6 #change the input value\n",
        "if a >= 6: #if a is greater than or equal 5\n",
        "  print('Hello')\n",
        "else:\n",
        "  print('Goodbye')"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PA_0zoSd6u5g"
      },
      "source": [
        "We can even further extend this by asking an additional questions by nesting if statements:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_7Y2IobJ62Bd",
        "outputId": "6f952b76-9971-453a-cdc8-c5f5a25a058b"
      },
      "source": [
        "a = 2 #change the input value\n",
        "if a == 1: #if a is equal to 1 \n",
        "  print('Hola')\n",
        "if a == 2: #if a is equal to 1 \n",
        "  print('Adiós')\n",
        "if a > 2: #if a is greater than 2 \n",
        "  print('Jorge')"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Adiós\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VIzoSTHE8Vo2"
      },
      "source": [
        "There are a range of different operators we can use in this logics:\n",
        "* '==' equal to\n",
        "* '>' greater than\n",
        "* '<' less than\n",
        "* '>=' greater or equal to \n",
        "* '<=' less than or equal to\n",
        "* '!=' not equal too\n",
        "\n",
        "We can even combine these operators to ask multiple questions using and or or, for example:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qFTvo5MP84nZ",
        "outputId": "fdd29b6c-af35-43a4-e0a1-8081787d05e2"
      },
      "source": [
        "a = 3 #change the input value\n",
        "b = 3 #change the input value\n",
        "#using an & operator \n",
        "if a == 2 and b > 2: # here we are asking, if a is equal to 2 and b is greater than 2\n",
        "  print('Hello')\n",
        "else: \n",
        "  print('Goodbye')"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Goodbye\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UmnXX8by-SW9",
        "outputId": "6854c2f4-ac82-48d7-b165-29cbb701d279"
      },
      "source": [
        "a = 3 #change the input value\n",
        "b = 1 #change the input value\n",
        "#using an or operator \n",
        "if a == 2 or b > 2: # here we are asking, if a is equal to 2 and b is greater than 2\n",
        "  print('Hello')\n",
        "else: \n",
        "  print('Goodbye')"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Goodbye\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zTBqlfKI-hiz"
      },
      "source": [
        "We can now combine the logic statements and the for loops into something called a while loop. As suggested by the name, the loop will continue running until a condition is met, this condition can be provided before the loop or it could be created within the loop:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EPgk3b3K_nTP",
        "outputId": "b22902f5-9b57-4a83-f819-fe4aef7792e0"
      },
      "source": [
        "a = 0 #setting an initial condition\n",
        "while a < 10:\n",
        "  a = a+1\n",
        "  print(a)\n",
        "  # print('Hello')"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n0qMqhIl_07r",
        "outputId": "87d37da6-3601-4cc2-e3b5-e7dfa8da0a08"
      },
      "source": [
        "c = 0; #sometimes we might even want the loop to count. We can do this by adding a number to c at each itteration. \n",
        "while c < 5:\n",
        "  c = c + 2\n",
        "  print(c)"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "4\n",
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vXcW5kmHAIzQ"
      },
      "source": [
        "You do need to be very carefull when using while loops that there is a criteria for the loop to end; if not the loop could keep running to infinity! 🙈"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MXqcRAkSBMyL"
      },
      "source": [
        "# Plotting \n",
        "\n",
        "So to be able to plot, we need to use an additional library. The one I prefer to use is called matplotlib (this is how you create all of the fancy plots you see in theh journal papers). "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "UjWYP2_3B14H",
        "outputId": "4ab1f68e-d986-4953-9467-971e0b026ef7"
      },
      "source": [
        "import matplotlib.pyplot as plt #again we simplify the name to plt, but realistically this could be what you want! \n",
        "a = [1,2,3,4,5,6] # again we define some values \n",
        "b = [6,5,4,3,2,1] # again we define some values \n",
        "c = [10,15,41,3,12,1] # again we define some values \n",
        "plt.plot(a,c) #and it really is as simple as this to crearte a plot! \n",
        "plt.plot(a,b)\n",
        "plt.ylabel('Hola') # add some lables\n",
        "plt.xlabel('Hello') # add some lables\n",
        "plt.title('Hola vs Hello') # add a title"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Hola vs Hello')"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gmpfR1kGDAQD"
      },
      "source": [
        "We can tweak any paramter of the plots in the following way, these possibilities are endless; check out the documentation for different ideas:\n",
        "\n",
        "https://matplotlib.org/stable/gallery/index.html\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "zIJUEmpeDF_R",
        "outputId": "28378f37-9453-4c54-ca73-9428300e46c1"
      },
      "source": [
        "import matplotlib.pyplot as plt #again we simplify the name to plt, but realistically this could be what you want! \n",
        "\n",
        "plt.figure(figsize=(10,7)) # here we can change the size of the figure \n",
        "\n",
        "a1 = [1,2,3,4,5,6] # again we define some values \n",
        "b1 = [6,5,4,3,2,1] # again we define some values \n",
        "a2 = [2,3,4,5,6,7] # again we define some values \n",
        "b2 = [12,11,10,9,8,7] # again we define some values \n",
        "\n",
        "plt.plot(a1,b1,'r--',label='sample1') # this changes the lines to being red and dashed. \n",
        "plt.plot(a2,b2,'b-*',label='bob') # this changes the lines to being blue and with stars. \n",
        "\n",
        "plt.ylabel('Hola') # add some lables\n",
        "plt.xlabel('Hello') # add some lables\n",
        "plt.title('Hola vs Hello') # add a title\n",
        "plt.rc('xtick', labelsize=30) #chnage the fontsize  \n",
        "plt.rc('ytick', labelsize=20) #chnage the fontsize  \n",
        "plt.legend() #this adds a legend"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f7a4ab61c90>"
            ]
          },
          "metadata": {},
          "execution_count": 51
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gHq7oIdhFd_t"
      },
      "source": [
        "So I think this really shows how easy it is to create simple plots using Python. It is also possible to put these plots into a loop which can automate multiple operations (example coming soon). We also have different types of plots; a really usefull plot for our work is a histogram, this will help identify different modes within a dataset:\n",
        "\n",
        "https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "id": "f2qH9YJaF4Ye",
        "outputId": "3cf3b805-bf38-4f16-a8b4-eb9ea00196e5"
      },
      "source": [
        "import matplotlib.pyplot as plt \n",
        "import numpy as np\n",
        "a = np.random.normal(0,0.1,10000) # just created some random numbers (normal distribution)\n",
        "# now we can plot the histogram \n",
        "plt.hist(a,bins=100,range=[-0.3,0.3]) #here we can set the number of bins and the ranges \n",
        "plt.ylabel('frequency')\n",
        "plt.xlabel('range')\n",
        "plt.title('freq vs. range')"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'freq vs. range')"
            ]
          },
          "metadata": {},
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5W3svk21J69t"
      },
      "source": [
        "Here we can now combine the loops and the plots to create subplots:\n",
        "\n",
        "https://matplotlib.org/stable/gallery/subplots_axes_and_figures/subplots_demo.html\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "SzBaJ4yUJ_lX",
        "outputId": "410b4b6c-6ec6-463c-d411-1a5dfb425fae"
      },
      "source": [
        "import matplotlib.pyplot as plt \n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5)) # here we define we can have a 2 colums and 1 rows plots\n",
        "\n",
        "a1 = [1,2,3,4,5,6] # again we define some values \n",
        "b1 = [6,5,4,3,2,1] # again we define some values \n",
        "a2 = [2,3,4,5,6,7] # again we define some values \n",
        "b2 = [12,11,10,9,8,7] # again we define some values \n",
        "\n",
        "fig.suptitle('Horizontally stacked subplots')\n",
        "ax1.plot(a1, b1,'r')\n",
        "ax2.plot(a2, b2,'k')\n",
        "\n",
        "ax1.set(xlabel='z-label', ylabel='y-label')\n",
        "ax2.set(xlabel='x-label', ylabel='y-label')"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'y-label'), Text(0.5, 0, 'x-label')]"
            ]
          },
          "metadata": {},
          "execution_count": 56
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "okkyAdJEeY5-",
        "outputId": "56dcd03b-79f2-4114-cfbe-9d11dcb9786f"
      },
      "source": [
        "import matplotlib.pyplot as plt \n",
        "fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5)) # here we define we can have a 2 colums and 1 rows plots\n",
        "\n",
        "a1 = [1,2,3,4,5,6] # again we define some values \n",
        "b1 = [6,5,4,3,2,1] # again we define some values \n",
        "a2 = [2,3,4,5,6,7] # again we define some values \n",
        "b2 = [12,11,10,9,8,7] # again we define some values \n",
        "a3 = [2,3,4,5,6,7] # again we define some values \n",
        "b3 = [12,11,10,9,8,7] # again we define some values \n",
        "\n",
        "\n",
        "fig.suptitle('Horizontally stacked subplots')\n",
        "ax1.plot(a1, b1)\n",
        "ax2.plot(a2, b2)\n",
        "ax3.plot(a3, b3,'r')\n",
        "\n",
        "ax1.set(xlabel='z-label', ylabel='y-label')\n",
        "ax2.set(xlabel='x-label', ylabel='y-label')\n",
        "ax2.set(xlabel='∫-label', ylabel='y-label')"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'y-label'), Text(0.5, 0, '∫-label')]"
            ]
          },
          "metadata": {},
          "execution_count": 57
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x360 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ChupILnEO83C"
      },
      "source": [
        "Let's just demonstarte how we might use this in a loop"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 912
        },
        "id": "KbyYoUmmO8OO",
        "outputId": "76d0839b-2777-4fca-dd5d-c3fc6e59f1d9"
      },
      "source": [
        "import matplotlib.pyplot as plt \n",
        "import numpy as np\n",
        "fig, axs = plt.subplots(2, 3, figsize=(20, 15))\n",
        "for i in range(0,2): # here we can use nested loops to make the subplots\n",
        "  for j in range(0,3): \n",
        "    axs[i,j].scatter(np.random.rand(100), np.random.rand(100))\n",
        "    axs[i,j].set(title=f'{i},{j}')\n",
        "    axs[i,j].set(xlabel='x-label', ylabel='y-label')\n"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x1080 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l2VFS0sIyw68"
      },
      "source": [
        "Additional Histogram "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dGkJootbyy3f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "outputId": "9931bc9c-3ab6-4d76-e214-d92eef851470"
      },
      "source": [
        "# the histogram of the data\n",
        "import matplotlib.pyplot as plt \n",
        "import numpy as np\n",
        "\n",
        "mu = 100  # mean of distribution\n",
        "sigma = 15  # standard deviation of distribution\n",
        "x = mu + sigma * np.random.randn(437)\n",
        "\n",
        "num_bins = 50\n",
        "fig, ax = plt.subplots()\n",
        "n, bins, patches = ax.hist(x, num_bins, density=True)\n",
        "y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n",
        "     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))\n",
        "ax.plot(bins, y, '--')\n",
        "ax.set_xlabel('Smarts')\n",
        "ax.set_ylabel('Probability density')\n",
        "ax.set_title(r'Histogram of IQ: $\\mu=100$, $\\sigma=15$')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Histogram of IQ: $\\\\mu=100$, $\\\\sigma=15$')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "498-btyJBSdk"
      },
      "source": [
        "We can now look at the data and view the different locations. To do this we do the following (although this does truncate some of the names). "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J12NITAOMJyN"
      },
      "source": [
        "OK, we now have the raw data in and we can begin to do some statistics. You also have to remember this is real world data. This means there is often gaps in it. We will address this when we come to look at the statistics. "
      ]
    }
  ]
}